{"version":3,"sources":["changesStatus.js"],"names":["dotenv","config","changeStatusOfSingleRecords","adminchangeStatusOfOneRecord","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagid","impData","fetchOneRecord","data","status","json","message","username","length","body","changeStatus","updatedRecord","changedRecord"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,2BAA2B,GAAG;AAC5BC,EAAAA,4BAD4B;AAAA;AAAA;AAAA,kDACCC,GADD,EACMC,GADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1BC,cAAAA,yBAF0B,GAEEF,GAAG,CAACG,OAAJ,CAAYC,aAFd;AAG1BC,cAAAA,+CAH0B,GAGwBC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAHxB;AAK1BC,cAAAA,QAL0B,GAKfC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CALO;AAAA;AAAA,qBAMbC,eAAQC,cAAR,CAAuBL,QAAvB,CANa;;AAAA;AAM1BM,cAAAA,IAN0B;;AAAA,kBAQ3BN,QAR2B;AAAA;AAAA;AAAA;;AAAA,+CASvBV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,sBAAef,+CAA+C,CAACgB,QAA/D;AAAtB,eAArB,CATuB;;AAAA;AAAA,oBAW5BJ,IAAI,CAACK,MAAL,KAAgB,CAXY;AAAA;AAAA;AAAA;;AAAA,+CAYvBrB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,sBAAef,+CAA+C,CAACgB,QAA/D,kCAA+FV,QAA/F;AAAtB,eAArB,CAZuB;;AAAA;AAexBO,cAAAA,MAfwB,GAeblB,GAAG,CAACuB,IAfS,CAexBL,MAfwB;AAAA;AAAA,qBAgBJH,eAAQS,YAAR,CAAqBN,MAAM,IAAID,IAAI,CAAC,CAAD,CAAJ,CAAQC,MAAvC,EAA+CN,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAAvD,CAhBI;;AAAA;AAgB1BW,cAAAA,aAhB0B;AAAA,+CAiBzBxB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,sBAAef,+CAA+C,CAACgB,QAA/D,+DAA4HV,QAA5H,mBAAtB;AAA4Ke,gBAAAA,aAAa,EAAED;AAA3L,eAArB,CAjByB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAApC;eAoBe3B,2B","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport impDataFromToken from '../helpers/token';\n\ndotenv.config();\nconst changeStatusOfSingleRecords = {\n  async adminchangeStatusOfOneRecord(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const recordId = parseInt(req.params.redflagid);\n    const data = await impData.fetchOneRecord(recordId);\n\n    if (!recordId) {\n      return res.status(404).json({ status: 404, message: `Hey Admin ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\n    }\n    if (data.length === 0) {\n      return res.status(404).json({ status: 404, message: `Hey Admin ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n\n    const { status } = req.body;\n    const updatedRecord = await impData.changeStatus(status || data[0].status, parseInt(req.params.redflagid));\n    return res.status(200).json({ status: 200, message: `Hey Admin ${decoded_token_in_the_way_to_obtain_user_details.username} !! You are changed status of this record with id ${recordId} Successfully `, changedRecord: updatedRecord });\n  },\n};\nexport default changeStatusOfSingleRecords;\n"]}