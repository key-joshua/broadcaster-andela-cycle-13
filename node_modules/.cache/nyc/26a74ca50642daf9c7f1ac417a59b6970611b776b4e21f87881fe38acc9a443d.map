{"version":3,"sources":["Xsignup.js"],"names":["XController","insert","req","res","body","Name","Marks","Level","status","send","datas","classStuff","create","message","retrieve","students","findAll","retrieveOne","student","findOne","parseInt","params","id","update","updatedclassStuff","stud","Data"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\learn-Testing-Travis-Coveralls-Maintainability\\server\\api\\controllers","sourcesContent":["import classStuff from '../models/class'\r\n\r\nconst XController = {\r\n  insert (req, res) {\r\n    if (!req.body.Name || !req.body.Marks || !req.body.Level) {\r\n      return res.status(400).send({'message': 'All fields are required'})\r\n    }\r\n\r\n    const datas = classStuff.create(req.body);\r\n    if (datas) {\r\n      return res.status(201).send({message : `Hy You added Successfully `, datas});\r\n    }\r\n    else{\r\n      return res.status(400).send({message : `Hy something Wrong Occured `});\r\n    }\r\n\r\n  },\r\n  retrieve (req, res) {\r\n    const students = classStuff.findAll();\r\n    return res.status(200).send({'message': 'student retrieved Successfully', students});\r\n  },\r\n  retrieveOne : (req, res) => {\r\n    const student = classStuff.findOne( parseInt(req.params.id));\r\n\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    return res.status(200).send({'message': 'student retrieved Successfully', student});\r\n  },\r\n  update : (req, res) => {\r\n    const student = classStuff.findOne(parseInt(req.params.id));\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    const updatedclassStuff = classStuff.update(parseInt(req.params.id), req.body)\r\n    return res.status(200).send({'message': 'student updated Successfully',updatedclassStuff});\r\n  },\r\n  delete : (req, res) => {\r\n    const student = classStuff.findOne(parseInt(req.params.id));\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    const stud = classStuff.delete(parseInt(req.params.id));\r\n    return res.status(204).send({'message': 'student deleted Successfully', Data:stud});\r\n  }\r\n}\r\nexport default XController;"]}