{"version":3,"sources":["signin.js"],"names":["signinUsers","loginUser","req","res","body","email","password","ckEmail","imphelp","check_email_if_is_empty","status","json","message","ckEmail1","check_email","ckPassword","check_password_if_is_empty","find_this_user","impData","check_if_email_exist","crypt","compare","err","result","category","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","visitByLink","firstname","id","created","data","visitByLinks"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport crypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/usersDB';\nimport imphelp from '../helpers/signupHelper';\n\nconst signinUsers = {\n  loginUser(req, res) {\n    const { email, password } = req.body;\n\n    const ckEmail = imphelp.check_email_if_is_empty(email);\n    if (ckEmail) return res.status(400).json({ status: 400, message: 'Hey Insert email !!' });\n    const ckEmail1 = imphelp.check_email(email);\n    if (ckEmail1) return res.status(400).json({ status: 400, message: 'Hey you are using Invalid email !!' });\n    const ckPassword = imphelp.check_password_if_is_empty(password);\n    if (ckPassword) return res.status(400).json({ status: 400, message: 'Hey Insert password !!' });\n\n\n    const find_this_user = impData.check_if_email_exist(email);\n    if (!find_this_user) { res.status(401).json({ status: 401, message: 'Hy wrong email' }); } else {\n      crypt.compare(password, find_this_user.password, (err, result) => {\n        if (result) {\n          if (find_this_user.category === 'none') {\n            dotenv.config();\n            const vistByToken = jwt.sign(find_this_user, process.env.SECRET_KEY, { expiresIn: '24000h' });\n            const visitByLink = `Hey  ${find_this_user.category} ${find_this_user.firstname} You can use this link /api/v1/auth/users/${find_this_user.id} to visit your account`;\n            res.status(200).json({ status: 200, message: `Hy ${find_this_user.firstname} your logged in successfully on ${imphelp.created}`, data: { vistByToken, visitByLink } });\n          }\n          if (find_this_user.category === 'admin') {\n            dotenv.config();\n            const vistByToken = jwt.sign(find_this_user, process.env.SECRET_KEY, { expiresIn: '24000h' });\n            const visitByLink = `Hey  ${find_this_user.category} ${find_this_user.firstname} You can use this link /api/v1/auth/users/${find_this_user.id} to visit your account`;\n            const visitByLinks = `Also, as ${find_this_user.category} You can use this link /api/v1/users/ to view all users details`;\n            res.status(200).json({ status: 200, message: `Hy ${find_this_user.firstname} your logged in successfully on ${imphelp.created}`, data: { vistByToken, visitByLink, visitByLinks } });\n          }\n        } else {\n          res.status(401).json({ status: 401, message: `Hy ${find_this_user.firstname} you are using wrong password ` });\n        }\n      });\n    }\n  },\n};\nexport default signinUsers;\n"]}