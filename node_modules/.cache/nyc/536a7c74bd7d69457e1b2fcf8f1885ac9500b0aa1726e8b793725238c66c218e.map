{"version":3,"sources":["signup.js"],"names":["registerUsers","signupUser","req","res","body","firstname","lastname","username","email","phone","password","ckfName","imphelp","check_firstName_if_is_empty","status","send","cklName","check_lastName_if_is_empty","ckuName","check_userName_if_is_empty","ckEmail","check_email_if_is_empty","ckEmail1","check_email","ckEmail2","impData","check_if_email_exist","ckPhone","check_phone_if_is_empty","ckPassword","check_password_if_is_empty","ckPassword1","check_length_password","ckPassword2","check_if_password_contains_number","ckPassword3","check_if_password_contains_special_character","ckPassword4","check_if_the_use_sample","saltRound","crypt","hash","err","readyDatas","toString","trim","toLowerCase","create","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","find_id_of_this_user","visitByLink","id","message","created","data"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\r\nimport crypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport impData from '../models/usersDB';\r\nimport imphelp from '../helpers/signupHelper';\r\n\r\nconst registerUsers = {\r\n  signupUser (req, res) {\r\n    const{firstname, lastname, username, email, phone, password} = req.body;\r\n    const ckfName = imphelp.check_firstName_if_is_empty(firstname);\r\n    if (ckfName) return res.status(400).send({ status: 400,'message':  'Hey Insert firstname !!'});\r\n    const cklName = imphelp.check_lastName_if_is_empty(lastname);\r\n    if (cklName) return res.status(400).send({ status: 400,'message': `Hey ${firstname} Insert lastname !!`});\r\n    const ckuName = imphelp.check_userName_if_is_empty(username);\r\n    if (ckuName) return res.status(400).send({ status: 400,'message': `Hey ${firstname} Insert username !!`});\r\n    const ckEmail = imphelp.check_email_if_is_empty(email);\r\n    if (ckEmail) return res.status(400).send({ status: 400,'message': `Hey ${firstname} Insert email !!`});\r\n    const ckEmail1 = imphelp.check_email(email);\r\n    if (ckEmail1) return res.status(400).send({ status: 400,'message': `Hey ${firstname} you are using Invalid email !!`});\r\n    const ckEmail2 = impData.check_if_email_exist(email);\r\n    if (ckEmail2) return res.status(409).send({ status: 409,'message': `Hey ${firstname} this email *${email}* already exsit !!`});\r\n    const ckPhone = imphelp.check_phone_if_is_empty(phone);\r\n    if (ckPhone) return res.status(400).send({ status: 400,'message': `Hey ${firstname} Insert phone number !!`});\r\n    const ckPassword = imphelp.check_password_if_is_empty(password);\r\n    if (ckPassword) return res.status(400).send({ status: 400,'message': `Hey ${firstname} Insert password !!`});\r\n    const ckPassword1 = imphelp.check_length_password(password);\r\n    if (ckPassword1) return res.status(400).send({ status: 400,'message': `Hey ${firstname} password should contain at least six characters !!`});\r\n    const ckPassword2 = imphelp.check_if_password_contains_number(password);\r\n    if (ckPassword2) return res.status(400).send({ status: 400,'message': `Hey ${firstname} password should contain number !!`});\r\n    const ckPassword3 = imphelp.check_if_password_contains_special_character(password);\r\n    if (ckPassword3) return res.status(400).send({ status: 400,'message': `Hey ${firstname} password should contain special character like qwerty@123 !!`});\r\n    const ckPassword4 = imphelp.check_if_the_use_sample(password);\r\n    if (ckPassword4) return res.status(400).send({ status: 400, 'message': `Hey ${firstname} you are not allowed to use  qwerty@123 password it is sample`});\r\n\r\n    const saltRound = 12;\r\n    crypt.hash(password, saltRound,(err, hash) => {\r\n        const readyDatas = {\r\n          firstname :firstname.toString().trim().toLowerCase(),\r\n          lastname :lastname.toString().trim().toLowerCase(),\r\n          username :username.toString().trim().toLowerCase(),\r\n          email :email.toString().trim().toLowerCase(),\r\n          phone :phone,\r\n          password :hash\r\n        }\r\n        impData.create(readyDatas);\r\n        dotenv.config();\r\n        const vistByToken = jwt.sign(readyDatas, process.env.SECRET_KEY, {expiresIn : '24000h'});\r\n        const find_id_of_this_user = impData.check_if_email_exist(email);\r\n        const visitByLink = `Also, You can use this link /api/v1/auth/users/${find_id_of_this_user.id} to visit your account`;\r\n        res.status(201).send({ status: 201,  message: `Hy ${firstname} your account have successfully created on ${imphelp.created}`, data: { vistByToken, visitByLink} });\r\n      \r\n    });\r\n  }\r\n\r\n\r\n}\r\nexport default registerUsers;"]}