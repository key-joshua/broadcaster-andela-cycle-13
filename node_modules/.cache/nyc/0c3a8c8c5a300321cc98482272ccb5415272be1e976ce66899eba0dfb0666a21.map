{"version":3,"sources":["DB.js"],"names":["StoreData","email","text","values","pool","query","rows","data","firstname","lastname","username","phone","password","Date","recordId","userId","createdBy","title","type","latitude","longitude","images","videos","comment","locationo","status","retrieveAllUsers","retrieveAllRecords","fetchedId","expstoreData"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\models","sourcesContent":["import pool from '../config/connect_db';\n\nclass StoreData {\n  async check_if_email_exist(email) {\n    const text = 'SELECT * FROM challenge.userDB WHERE email = $1';\n    const values = [email];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async createUser(data) {\n    const { firstname, lastname, username, email, phone, password } = data;\n    const text = 'INSERT INTO challenge.userDB( category, firstname, lastname, username, email, phoneNumber, password, createdDate, modifiedDate ) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) returning *';\n    const values = ['none', firstname, lastname, username, email, phone, password, new Date(), 'none'];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async createRecord(data) {\n    const { recordId, userId, createdBy, title, type, latitude, longitude, images, videos, comment } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'INSERT INTO challenge.dataDB(recordId, userId, createdBy, title, type, location, latitude, longitude, status, images, videos, comment, createdOn, modifiedOn ) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) returning *';\n    const values = [recordId, userId, createdBy, title, type, locationo, latitude, longitude, 'draft', images, videos, comment, new Date(), 'none'];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async updateLocation(data, recordId) {\n    const { latitude, longitude } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'UPDATE challenge.dataDB SET location = $1, latitude = $2, longitude = $3, modifiedOn = $4 WHERE recordId = $5 returning*';\n    const values = [locationo, latitude, longitude, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async updateComment(data, recordId) {\n    const { createdBy, title, type, latitude, longitude, images, videos, comment } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'UPDATE challenge.dataDB SET createdBy = $1, title = $2, type = $3, location = $4, latitude = $5, longitude = $6, images = $7, videos = $8, comment = $9, modifiedOn = $10 WHERE recordId = $11 returning*';\n    const values = [createdBy, title, type, locationo, latitude, longitude, images, videos, comment, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async changeStatus(status, recordId) {\n    const text = 'UPDATE challenge.dataDB SET status = $1, modifiedOn = $2 WHERE recordId = $3 returning*';\n    const values = [status, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async fetchAllUser() {\n    const retrieveAllUsers = 'SELECT * FROM challenge.userDB';\n    const { rows } = await pool.query(retrieveAllUsers);\n    return rows;\n  }\n\n  async fetchAllRecords() {\n    const retrieveAllRecords = 'SELECT * FROM challenge.dataDB';\n    const { rows } = await pool.query(retrieveAllRecords);\n    return rows;\n  }\n\n  async fetchOneRecord(recordId) {\n    const text = 'SELECT * FROM challenge.dataDB WHERE recordId = $1';\n    const values = [recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async fetchLastRecordId() {\n    const fetchedId = 'SELECT recordid FROM challenge.dataDB WHERE recordid=(SELECT max(recordid) FROM challenge.dataDB)';\n    const { rows } = await pool.query(fetchedId);\n    return rows;\n  }\n\n  async delete(recordId) {\n    const text = 'DELETE FROM challenge.dataDB WHERE recordId = $1 returning*';\n    const values = [recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async deleteTestHelp(email) {\n    const text = 'DELETE FROM challenge.userDB WHERE email = $1 returning*';\n    const values = [email];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n}\nconst expstoreData = new StoreData();\nexport default expstoreData;\n"]}