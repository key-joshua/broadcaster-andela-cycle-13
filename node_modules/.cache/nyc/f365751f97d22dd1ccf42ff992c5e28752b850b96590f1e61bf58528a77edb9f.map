{"version":3,"sources":["createRecord.js"],"names":["dotenv","config","createSingleRecords","createOneRecords","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","body","title","type","latitude","longitude","images","videos","comment","ckTitle","imphelp","check_title_if_is_empty","status","json","message","username","ckType","check_type_if_is_empty","ckComment","check_comment_if_is_empty","imgs","files","imgsPath","map","path","join","vids","vidsPath","readyDatas","userId","id","createdBy","impData","createe","data","fetchLastCreatedRecord","created","record"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/createHelper';\n\ndotenv.config();\nconst createSingleRecords = {\n  createOneRecords(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n    const { title, type, latitude, longitude, images, videos, comment } = req.body;\n\n    const ckTitle = imphelp.check_title_if_is_empty(title);\n    if (ckTitle) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record title is needed !!` });\n\n    const ckType = imphelp.check_type_if_is_empty(type);\n    if (ckType) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record type is needed !!` });\n\n    const ckComment = imphelp.check_comment_if_is_empty(comment);\n    if (ckComment) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record comment is needed !!` });\n\n    let imgs;\n    if (req.files.images) {\n      const imgsPath = req.files.images.map(({ path }) => path);\n      imgs = imgsPath.join(',  ');\n    }\n    let vids;\n    if (req.files.videos) {\n      const vidsPath = req.files.videos.map(({ path }) => path);\n      vids = vidsPath.join(',  ');\n    }\n\n    const readyDatas = {\n      userId: decoded_token_in_the_way_to_obtain_user_details.id,\n      createdBy: decoded_token_in_the_way_to_obtain_user_details.username,\n      title: title,\n      type: type,\n      latitude: latitude,\n      longitude: longitude,\n      images: imgs,\n      videos: vids,\n      comment: comment,\n    };\n    impData.createe(readyDatas);\n    const data = impData.fetchLastCreatedRecord(readyDatas.userId);\n    res.status(201).json({ status: 201, message: `Hy ${decoded_token_in_the_way_to_obtain_user_details.username} your record has created successfully on ${imphelp.created}`, record: data });\n  },\n};\nexport default createSingleRecords;\n"]}