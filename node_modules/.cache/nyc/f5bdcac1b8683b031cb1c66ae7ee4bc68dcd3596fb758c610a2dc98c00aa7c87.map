{"version":3,"sources":["createTest.js"],"names":["dotenv","config","store","title","images","videos","Testing","createTest","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","body","console","log","file","readyDatas","push","status","json","message","username","imphelp","created","record","retrieveTest"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,MAAM,EAAE,WAFV;AAGEC,EAAAA,MAAM,EAAE;AAHV,CADY,EAMZ;AACEF,EAAAA,KAAK,EAAE,OADT;AAEEC,EAAAA,MAAM,EAAE,WAFV;AAGEC,EAAAA,MAAM,EAAE;AAHV,CANY,CAAd;AAYA,IAAMC,OAAO,GAAG;AACdC,EAAAA,UADc,sBACHC,GADG,EACEC,GADF,EACO;AACnB,QAAMC,yBAAyB,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA9C;;AACA,QAAMC,+CAA+C,GAAGC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAxD;;AAFmB,oBAIeV,GAAG,CAACW,IAJnB;AAAA,QAIXhB,KAJW,aAIXA,KAJW;AAAA,QAIJC,MAJI,aAIJA,MAJI;AAAA,QAIIC,MAJJ,aAIIA,MAJJ;AAKnBe,IAAAA,OAAO,CAACC,GAAR,CAAYb,GAAG,CAACc,IAAhB;AACA,QAAMC,UAAU,GAAG;AACjBpB,MAAAA,KAAK,EAAEA,KADU;AAEjBC,MAAAA,MAAM,EAAEA,MAFS;AAGjBC,MAAAA,MAAM,EAAEA;AAHS,KAAnB;AAKAH,IAAAA,KAAK,CAACsB,IAAN,CAAWD,UAAX;AACAd,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,eAAQd,+CAA+C,CAACe,QAAxD,sDAA4GC,yBAAQC,OAApH,CAAtB;AAAqJC,MAAAA,MAAM,EAAE7B;AAA7J,KAArB;AACD,GAda;AAed8B,EAAAA,YAfc,wBAeDxB,GAfC,EAeIC,GAfJ,EAeS;AACrB,QAAMC,yBAAyB,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA9C;;AACA,QAAMC,+CAA+C,GAAGC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAxD;;AACAT,IAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,eAAQd,+CAA+C,CAACe,QAAxD,+DAAqHC,yBAAQC,OAA7H,CAAtB;AAA8JC,MAAAA,MAAM,EAAE7B;AAAtK,KAArB;AACD;AAnBa,CAAhB;eAqBeI,O","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/createHelper';\n\ndotenv.config();\nconst store = [\n  {\n    title: 'Test',\n    images: 'imaga.png',\n    videos: 'sample.mp4',\n  },\n  {\n    title: 'Test2',\n    images: 'imagb.png',\n    videos: 'sample.mp4',\n  },\n];\nconst Testing = {\n  createTest(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const { title, images, videos } = req.body;\n    console.log(req.file);\n    const readyDatas = {\n      title: title,\n      images: images,\n      videos: videos,\n    };\n    store.push(readyDatas);\n    res.status(201).json({ status: 201, message: `Hy ${decoded_token_in_the_way_to_obtain_user_details.username} your record has created successfully on ${imphelp.created}`, record: store });\n  },\n  retrieveTest(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n    res.status(200).json({ status: 200, message: `Hy ${decoded_token_in_the_way_to_obtain_user_details.username} you are retieved all records has successfully on ${imphelp.created}`, record: store });\n  },\n};\nexport default Testing;\n"]}