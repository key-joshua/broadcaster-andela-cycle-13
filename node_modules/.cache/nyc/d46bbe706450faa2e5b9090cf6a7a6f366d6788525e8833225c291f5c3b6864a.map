{"version":3,"sources":["oneRecord.js"],"names":["dotenv","config","retrieveSingleRecords","retrieveOneRecords","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagid","status","json","message","username","data","impData","fetchOneRecord","record"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,kBAD4B,8BACTC,GADS,EACJC,GADI,EACC;AAC3B,QAAMC,yBAAyB,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA9C;;AACA,QAAMC,+CAA+C,GAAGC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAxD;;AAEA,QAAMC,QAAQ,GAAGC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAAzB;;AACA,QAAI,CAACH,QAAL,EAAe;AACb,aAAOV,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD;AAAtB,OAArB,CAAP;AACD;;AACD,QAAMC,IAAI,GAAGC,eAAQC,cAAR,CAAuBV,QAAvB,CAAb;;AACA,QAAI,CAACQ,IAAL,EAAW;AACT,aAAOlB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD,kCAAyFP,QAAzF;AAAtB,OAArB,CAAP;AACD;;AACD,WAAOV,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD,qCAA4FP,QAA5F,iCAAtB;AAA0JW,MAAAA,MAAM,EAAEH;AAAlK,KAArB,CAAP;AACD;AAd2B,CAA9B;eAgBerB,qB","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle12\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport impDataFromToken from '../helpers/token';\n\ndotenv.config();\nconst retrieveSingleRecords = {\n  retrieveOneRecords(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const recordId = parseInt(req.params.redflagid);\n    if (!recordId) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\n    }\n    const data = impData.fetchOneRecord(recordId);\n    if (!data) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! Hope record with id ${recordId} was retrieved Successfully `, record: data });\n  },\n};\nexport default retrieveSingleRecords;\n"]}