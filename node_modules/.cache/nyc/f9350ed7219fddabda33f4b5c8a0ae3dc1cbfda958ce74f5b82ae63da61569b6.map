{"version":3,"sources":["oneRecord.js"],"names":["dotenv","config","retrieveSingleRecords","retrieveOneRecords","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagid","status","json","message","username","impData","fetchOneRecord","data","length","record"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,qBAAqB,GAAG;AACtBC,EAAAA,kBADsB;AAAA;AAAA;AAAA,kDACHC,GADG,EACEC,GADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpBC,cAAAA,yBAFoB,GAEQF,GAAG,CAACG,OAAJ,CAAYC,aAFpB;AAGpBC,cAAAA,+CAHoB,GAG8BC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAH9B;AAKpBC,cAAAA,QALoB,GAKTC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CALC;;AAAA,kBAMrBH,QANqB;AAAA;AAAA;AAAA;;AAAA,+CAOjBV,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD;AAAtB,eAArB,CAPiB;;AAAA;AAAA;AAAA,qBASPC,eAAQC,cAAR,CAAuBT,QAAvB,CATO;;AAAA;AASpBU,cAAAA,IAToB;;AAAA,oBAUtBA,IAAI,CAACC,MAAL,KAAgB,CAVM;AAAA;AAAA;AAAA;;AAAA,+CAWjBrB,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD,kCAAyFP,QAAzF;AAAtB,eAArB,CAXiB;;AAAA;AAAA,+CAanBV,GAAG,CAACc,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASZ,+CAA+C,CAACa,QAAzD,qCAA4FP,QAA5F,iCAAtB;AAA0JY,gBAAAA,MAAM,EAAEF;AAAlK,eAArB,CAbmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAA9B;eAgBevB,qB","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\n\ndotenv.config();\nconst retrieveSingleRecords = {\n  async retrieveOneRecords(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const recordId = parseInt(req.params.redflagid);\n    if (!recordId) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\n    }\n    const data = await impData.fetchOneRecord(recordId);\n    if (data.length === 0) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! Hope record with id ${recordId} was retrieved Successfully `, record: data });\n  },\n};\nexport default retrieveSingleRecords;\n"]}