{"version":3,"sources":["signupHelper.js"],"names":["help","firstName","empty_firstName","lastname","empty_lastName","username","empty_userName","email","empty_email","phone","empty_phone","get_inserted_user_email","give_format_the_email_user_inserted_before_that_email_goes_in_the_database_to_save","toString","trim","toLowerCase","mail","real_email","finalCheck","test","password","empty_password","get_inserted_user_password","give_format_inserted_user_password","weak_password","length","search","weak_Name","sample","created","Date","exphelp"],"mappings":";;;;;;;;;;;;;IAAMA,I;;;;;gDAEyBC,S,EAAW;AACpC,aAAO,KAAKC,eAAL,GAAuB,CAACD,SAA/B;AACF;;;+CAE0BE,Q,EAAU;AAClC,aAAO,KAAKC,cAAL,GAAsB,CAACD,QAA9B;AACF;;;+CAE0BE,Q,EAAU;AAClC,aAAO,KAAKC,cAAL,GAAsB,CAACD,QAA9B;AACF;;;4CAEuBE,K,EAAO;AAC5B,aAAO,KAAKC,WAAL,GAAmB,CAACD,KAA3B;AACF;;;4CAEuBE,K,EAAO;AAC5B,aAAO,KAAKC,WAAL,GAAmB,CAACD,KAA3B;AACF;;;gCAEWF,K,EAAM;AACf,UAAMI,uBAAuB,GAAGJ,KAAhC;AACA,UAAMK,kFAAkF,GAAGD,uBAAuB,CAACE,QAAxB,GAAmCC,IAAnC,GAA0CC,WAA1C,EAA3F;AACA,UAAMC,IAAI,GAAGJ,kFAAb;AACA,UAAMK,UAAU,GAAG,6EAAnB;AACA,aAAO,KAAKC,UAAL,GAAmB,CAACD,UAAU,CAACE,IAAX,CAAgBH,IAAhB,CAA3B;AACF;;;+CAE0BI,Q,EAAU;AAClC,aAAO,KAAKC,cAAL,GAAsB,CAACD,QAA9B;AACF;;;0CAEsBA,Q,EAAS;AAC3B,UAAME,0BAA0B,GAAGF,QAAnC;AACA,UAAMG,kCAAkC,GAAGD,0BAA0B,CAACT,QAA3B,GAAsCC,IAAtC,GAA6CC,WAA7C,EAA3C;AACA,aAAO,KAAKS,aAAL,GAAsBD,kCAAkC,CAACE,MAAnC,GAA4C,CAAzE;AACH;;;sDAEiCL,Q,EAAS;AACzC,UAAME,0BAA0B,GAAGF,QAAnC;AACA,UAAMG,kCAAkC,GAAGD,0BAA0B,CAACT,QAA3B,GAAsCC,IAAtC,GAA6CC,WAA7C,EAA3C;AACA,aAAO,KAAKS,aAAL,GAAsBD,kCAAkC,CAACG,MAAnC,CAA0C,OAA1C,MAAuD,CAAC,CAArF;AACF;;;iEAE4CN,Q,EAAS;AACnD,UAAME,0BAA0B,GAAGF,QAAnC;AACA,UAAMG,kCAAkC,GAAGD,0BAA0B,CAACT,QAA3B,GAAsCC,IAAtC,GAA6CC,WAA7C,EAA3C;AACA,aAAO,KAAKY,SAAL,GAAkBJ,kCAAkC,CAACG,MAAnC,CAA0C,yCAA1C,MAAyF,CAAC,CAAnH;AACF;;;4CAEuBN,Q,EAAU;AAC/B,aAAO,KAAKQ,MAAL,GAAcR,QAAQ,CAACP,QAAT,GAAoBC,IAApB,GAA2BC,WAA3B,OAA6C,YAAlE;AACF;;;AAED,kBAAa;AAAA;AACV,SAAKc,OAAL,GAAe,IAAIC,IAAJ,GAAWjB,QAAX,EAAf;AACF;;;;;AAKJ,IAAMkB,OAAO,GAAG,IAAI/B,IAAJ,EAAhB;eACe+B,O","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\helpers","sourcesContent":["class help {\r\n\r\n   check_firstName_if_is_empty(firstName) { \r\n      return this.empty_firstName = !firstName;\r\n   }\r\n\r\n   check_lastName_if_is_empty(lastname) { \r\n      return this.empty_lastName = !lastname;\r\n   }\r\n\r\n   check_userName_if_is_empty(username) { \r\n      return this.empty_userName = !username;\r\n   }\r\n   \r\n   check_email_if_is_empty(email) { \r\n      return this.empty_email = !email;\r\n   }\r\n\r\n   check_phone_if_is_empty(phone) { \r\n      return this.empty_phone = !phone;\r\n   }\r\n\r\n   check_email(email){\r\n      const get_inserted_user_email = email;\r\n      const give_format_the_email_user_inserted_before_that_email_goes_in_the_database_to_save = get_inserted_user_email.toString().trim().toLowerCase();\r\n      const mail = give_format_the_email_user_inserted_before_that_email_goes_in_the_database_to_save;\r\n      const real_email = /^(([a-zA-Z0-9\\.-_]{2,6})+)@(([a-zA-Z0-9]{2,6})+).([a-z]{2,6})(.[a-z]{2,6})$/;\r\n      return this.finalCheck = (!real_email.test(mail));\r\n   }\r\n\r\n   check_password_if_is_empty(password) { \r\n      return this.empty_password = !password;\r\n   }\r\n\r\n    check_length_password(password){\r\n        const get_inserted_user_password = password;\r\n        const give_format_inserted_user_password = get_inserted_user_password.toString().trim().toLowerCase();\r\n        return this.weak_password = (give_format_inserted_user_password.length < 6);\r\n    }\r\n    \r\n    check_if_password_contains_number(password){\r\n      const get_inserted_user_password = password;\r\n      const give_format_inserted_user_password = get_inserted_user_password.toString().trim().toLowerCase();\r\n      return this.weak_password = (give_format_inserted_user_password.search(/[0-9]/) === -1);\r\n   }\r\n\r\n   check_if_password_contains_special_character(password){\r\n      const get_inserted_user_password = password;\r\n      const give_format_inserted_user_password = get_inserted_user_password.toString().trim().toLowerCase();\r\n      return this.weak_Name = (give_format_inserted_user_password.search(/[!\\@\\#\\$\\%\\&\\*\\~\\`\\:\\\"\"\\''\\'\\\"\\?\\/\\,\\.]/) === -1);\r\n   }\r\n\r\n   check_if_the_use_sample(password) {\r\n      return this.sample = password.toString().trim().toLowerCase() === \"qwerty@123\";\r\n   }\r\n\r\n   constructor(){\r\n      this.created = new Date().toString();\r\n   }\r\n\r\n  \r\n} \r\n\r\nconst exphelp = new help();\r\nexport default exphelp;"]}