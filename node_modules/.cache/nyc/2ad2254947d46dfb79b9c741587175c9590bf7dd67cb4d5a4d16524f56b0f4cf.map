{"version":3,"sources":["signup.js"],"names":["registerUsers","signupUser","req","res","body","firstname","lastname","username","email","phone","password","ckfName","imphelp","check_firstName_if_is_empty","status","json","message","cklName","check_lastName_if_is_empty","ckuName","check_userName_if_is_empty","ckEmail","check_email_if_is_empty","ckEmail1","check_email","impData","check_if_email_exist","ckEmail2","length","ckPhone","check_phone_if_is_empty","ckPassword","check_password_if_is_empty","ckPassword1","check_length_password","ckPassword2","check_if_password_contains_number","ckPassword3","check_if_password_contains_special_character","ckPassword4","check_if_the_use_sample","saltRound","crypt","hash","err","readyDatas","toString","trim","toLowerCase","createUser","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","created","Token"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport crypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/signupHelper';\n\nconst registerUsers = {\n  async signupUser(req, res) {\n    const { firstname, lastname, username, email, phone, password } = req.body;\n    const ckfName = imphelp.check_firstName_if_is_empty(firstname);\n    if (ckfName) return res.status(400).json({ status: 400, message: 'Hey Insert firstname !!' });\n    const cklName = imphelp.check_lastName_if_is_empty(lastname);\n    if (cklName) return res.status(400).json({ status: 400, message: `Hey ${firstname} Insert lastname !!` });\n    const ckuName = imphelp.check_userName_if_is_empty(username);\n    if (ckuName) return res.status(400).json({ status: 400, message: `Hey ${firstname} Insert username !!` });\n    const ckEmail = imphelp.check_email_if_is_empty(email);\n    if (ckEmail) return res.status(400).json({ status: 400, message: `Hey ${username} Insert email !!` });\n    const ckEmail1 = imphelp.check_email(email);\n    if (ckEmail1) return res.status(400).json({ status: 400, message: `Hey ${username} you are using Invalid email !!` });\n    const ckEmail2 = await impData.check_if_email_exist(email);\n    if (ckEmail2.length !== 0) return res.status(409).json({ status: 409, message: `Hey ${username} this email *${email}* already exsit !!` });\n    const ckPhone = imphelp.check_phone_if_is_empty(phone);\n    if (ckPhone) return res.status(400).json({ status: 400, message: `Hey ${username} Insert phone number !!` });\n    const ckPassword = imphelp.check_password_if_is_empty(password);\n    if (ckPassword) return res.status(400).json({ status: 400, message: `Hey ${username} Insert password !!` });\n    const ckPassword1 = imphelp.check_length_password(password);\n    if (ckPassword1) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain at least six characters !!` });\n    const ckPassword2 = imphelp.check_if_password_contains_number(password);\n    if (ckPassword2) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain number !!` });\n    const ckPassword3 = imphelp.check_if_password_contains_special_character(password);\n    if (ckPassword3) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain special character like qwerty@123 !!` });\n    const ckPassword4 = imphelp.check_if_the_use_sample(password);\n    if (ckPassword4) return res.status(400).json({ status: 400, message: `Hey ${username} you are not allowed to use  qwerty@123 password it is sample` });\n\n    const saltRound = 12;\n    crypt.hash(password, saltRound, (err, hash) => {\n      const readyDatas = {\n        firstname: firstname.toString().trim().toLowerCase(),\n        lastname: lastname.toString().trim().toLowerCase(),\n        username: username.toString().trim().toLowerCase(),\n        email: email.toString().trim().toLowerCase(),\n        phone: phone,\n        password: hash,\n      };\n      impData.createUser(readyDatas);\n      dotenv.config();\n      const vistByToken = jwt.sign(readyDatas, process.env.SECRET_KEY, { expiresIn: '24000h' });\n      res.status(201).json({ status: 201, message: `Hy ${username} your account have created successfully on ${imphelp.created}`, Token: vistByToken });\n    });\n  },\n};\nexport default registerUsers;\n"]}