{"version":3,"sources":["DB.js"],"names":["StoreData","email","text","values","pool","query","rows","data","firstname","lastname","username","phone","password","Date","userId","createdBy","title","type","latitude","longitude","images","videos","comment","locationo","recordId","status","retrieveAllUsers","retrieveAllRecords","expstoreData"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\models","sourcesContent":["import pool from '../config/connect_db';\n\nclass StoreData {\n  async check_if_email_exist(email) {\n    const text = 'SELECT * FROM challenge.userDB WHERE email = $1';\n    const values = [email];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async createUser(data) {\n    const { firstname, lastname, username, email, phone, password } = data;\n    const text = 'INSERT INTO challenge.userDB( category, firstname, lastname, username, email, phoneNumber, password, createdDate, modifiedDate ) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9) returning *';\n    const values = ['none', firstname, lastname, username, email, phone, password, new Date(), 'none'];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async createRecord(data) {\n    const { userId, createdBy, title, type, latitude, longitude, images, videos, comment } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'INSERT INTO challenge.dataDB( userId, createdBy, title, type, location, latitude, longitude, status, images, videos, comment, createdOn, modifiedOn ) VALUES($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) returning *';\n    const values = [userId, createdBy, title, type, locationo, latitude, longitude, 'draft', images, videos, comment, new Date(), 'none'];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async updateLocation(data, recordId) {\n    const { latitude, longitude } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'UPDATE challenge.dataDB SET location = $1, latitude = $2, longitude = $3, modifiedOn = $4 WHERE recordId = $5 returning*';\n    const values = [locationo, latitude, longitude, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async updateComment(data, recordId) {\n    const { createdBy, title, type, latitude, longitude, images, videos, comment } = data;\n    const locationo = `Lat: ${latitude}, Long: ${longitude}`;\n    const text = 'UPDATE challenge.dataDB SET createdBy = $1, title = $2, type = $3, location = $4, latitude = $5, longitude = $6, images = $7, videos = $8, comment = $9, modifiedOn = $10 WHERE recordId = $11 returning*';\n    const values = [createdBy, title, type, locationo, latitude, longitude, images, videos, comment, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async changeStatus(status, recordId) {\n    const text = 'UPDATE challenge.dataDB SET status = $1, modifiedOn = $2 WHERE recordId = $3 returning*';\n    const values = [status, new Date(), recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async fetchAllUser() {\n    const retrieveAllUsers = 'SELECT * FROM challenge.userDB';\n    const { rows } = await pool.query(retrieveAllUsers);\n    return rows;\n  }\n\n  async fetchAllRecords() {\n    const retrieveAllRecords = 'SELECT * FROM challenge.dataDB';\n    const { rows } = await pool.query(retrieveAllRecords);\n    return rows;\n  }\n\n  async fetchOneRecord(recordId) {\n    const text = 'SELECT * FROM challenge.dataDB WHERE recordId = $1';\n    const values = [recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async delete(recordId) {\n    const text = 'DELETE FROM challenge.dataDB WHERE recordId = $1 returning*';\n    const values = [recordId];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n\n  async deleteTestHelp(email) {\n    const text = 'DELETE FROM challenge.userDB WHERE email = $1 returning*';\n    const values = [email];\n    const { rows } = await pool.query(text, values);\n    return rows;\n  }\n}\nconst expstoreData = new StoreData();\nexport default expstoreData;\n"]}