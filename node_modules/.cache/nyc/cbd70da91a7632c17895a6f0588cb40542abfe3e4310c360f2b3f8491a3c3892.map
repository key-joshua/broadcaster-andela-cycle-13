{"version":3,"sources":["usersController.js"],"names":["userController","signup","request","response","dotenv","config","giventoken","jwt","sign","category","usersDB","id","email","process","env","SECRET_KEY","expiresIn","newUser","length","firstName","body","lastName","address","bio","occupation","expertise","password","confirm_password","user_welcome_data_to_display","token","message","allowed_category","Name_to_display","Email_to_check","insert","some","el","status","send","push","data","signin","signuser","password_to_check","checkinsertedcategory","checkinsertedemail","checkinsertedpassword","view_users","change_user","checkuser","find","userId","parseInt","params","userid","update_body","mentors","insert_email","target_user","indexOf","splice","View_all_mentor","sort_mentors","filter","data_to_display","x","View_mentor","mentor","mentorId","mentorid","module","exports"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\free_mentors\\server\\api\\controllers","sourcesContent":["import usersDB from '../models/usersDB';\r\nimport jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\nimport Joi from 'joi';\r\n\r\n\r\n\r\n\r\n\r\n//#############################################################################        Working Properly\r\nconst userController = {\r\nsignup: (request, response)=> {\r\n\r\n  dotenv.config(); \r\n  const giventoken = jwt.sign({ category:usersDB.category,id:usersDB.id, email:usersDB.email,},process.env.SECRET_KEY,{expiresIn:86400});\r\n\r\n    const newUser = {\r\n        id: usersDB.length + 1,\r\n        category: 'user',\r\n        firstName: request.body.firstName,\r\n        lastName: request.body.lastName,\r\n        email: request.body.email,\r\n        address: request.body.address,\r\n        bio: request.body.bio,\r\n        occupation: request.body.occupation,\r\n        expertise: request.body.expertise,\r\n        password: request.body.password,\r\n        confirm_password: request.body.confirm_password\r\n\r\n      };\r\n\r\n      const user_welcome_data_to_display={\r\n        token:giventoken,\r\n        message: `Hey !!  you are successfully created account`,\r\n     };\r\n\r\n      const allowed_category = 'user';\r\n      const Name_to_display = newUser.firstName;\r\n      const Email_to_check = newUser.email;\r\n\r\n     \r\n    \r\n      const insert = usersDB.some((el) => el.email === Email_to_check );\r\n      if (insert) {\r\n        return response.status(401).send({ status: 401, message: `${'Hey !! This Email' + ' '}${Email_to_check} ` + 'has already exist' });\r\n      }else if (newUser.category!==allowed_category) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! allowed category is user` });\r\n      }else if (!Name_to_display) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! Insert firstname` });\r\n      }else if (!newUser.lastName) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! Insert lastname` });\r\n      } else if (!newUser.email) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! Insert email` });\r\n      } else if (!newUser.expertise) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! select what expertise` });\r\n      } else if (!newUser.password) {\r\n        return response.status(400).send({ status: 400, message: `Hey !! Insert password` });\r\n      } \r\n    \r\n      usersDB.push(newUser);\r\n      response.status(201).send({ status: 201, message: `${'Hey !! ' + ' '}${Name_to_display} ` + ' you  successfully created account', data: user_welcome_data_to_display }); \r\n\r\n        \r\n    \r\n    },\r\n//#############################################################################        Working properly\r\n\r\nsignin: (request, response)=> {\r\n\r\n  dotenv.config(); \r\n  const giventoken = jwt.sign({ category:usersDB.category,id:usersDB.id, email:usersDB.email,},process.env.SECRET_KEY,{expiresIn:86400});\r\n   \r\n  const signuser = {\r\n      \r\n      category: request.body.category,\r\n      email: request.body.email,\r\n      password: request.body.password,\r\n      \r\n  \r\n    };\r\n\r\n    const user_welcome_data_to_display={\r\n      token:giventoken, \r\n   };\r\n\r\n   \r\n    const Name_to_display = usersDB.firstName;\r\n    const allowed_category = signuser.category\r\n    const Email_to_check = signuser.email;\r\n    const password_to_check = signuser.password;\r\n\r\n   if (!signuser.category) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert Category` });\r\n    } else if (!signuser.email) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert Email` });\r\n    } else if (!signuser.password) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert password` });\r\n    } \r\n  \r\n    \r\n    const checkinsertedcategory = usersDB.some((el) => el.category === allowed_category );\r\n    const checkinsertedemail = usersDB.some((el) => el.email === Email_to_check );\r\n    const checkinsertedpassword =usersDB.some((el) => el.password === password_to_check );\r\n\r\n\r\n   if (!checkinsertedcategory) {\r\n      return response.status(401).send({ status: 401, message: `${'Hey !! This Category of' + ' '}${allowed_category} ` + 'does not belong to your account' });\r\n    }else if (!checkinsertedemail) {\r\n      return response.status(401).send({ status: 401, message: `${'Hey !! This Email' + ' '}${Email_to_check} ` + 'does not exist' });\r\n    }else if (!checkinsertedpassword) {\r\n      return response.status(401).send({ status: 401, message: `Hey !! This password is incorrect` });\r\n    }\r\n    \r\n      response.status(200).send({status: 200, message: `Hey !! You are logged in successfully `, data:user_welcome_data_to_display }); \r\n\r\n\r\n  },\r\n\r\nview_users: (request,response)=>{\r\n\r\n    return response.status(200).send({status: 200, message:\"Hey !! Hope you are retrieving all users\", data:usersDB});\r\n\r\n},\r\n//#############################################################################     some   Bags Here\r\n\r\nchange_user: (request, response) => {\r\n  const checkuser = usersDB.find((userId) => userId.id === parseInt(request.params.id, 10));\r\n  const userid = request.params.id;\r\n\r\n  if (!checkuser) {\r\n    return response.status(404).send({ status: 404, message: `${'Hey !! This user with id' + ' '}${userid} ` + 'does not exist' });\r\n  }\r\n\r\n  const update_body = {\r\n    id: mentors.length + 1,\r\n    category: request.body.category,\r\n    firstName: request.body.firstName,\r\n    lastName: request.body.lastName,\r\n    email: request.body.email,\r\n    address: request.body.address,\r\n    bio: request.body.bio,\r\n    occupation: request.body.occupation,\r\n    expertise: request.body.expertise,\r\n    password: request.body.password,\r\n    confirm_password: request.body.confirm_password,\r\n\r\n  };\r\n\r\n    const Name_to_display = update_body.firstName;\r\n    const Email_to_check = update_body.email;\r\n\r\n \r\n    const insert_email = mentors.some((el) => el.email === Email_to_check );\r\n    \r\n    if (!checkuser.id) {\r\n      return response.status(401).send({ status: 401, message: `Hey !! You can't update this id ${request.params.id} `});  \r\n    }if (!update_body.category) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! insert category` });\r\n    }else if (!Name_to_display) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert firstname` });\r\n    }else if (!update_body.lastName) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert lastname` });\r\n    }else if (!update_body.email) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert email` });\r\n    }else if (insert_email) {\r\n      return response.status(401).send({ status: 401, message: `${'Hey !! This Email' + ' '}${Email_to_check} ` + 'has already exist' });\r\n    }else if (!update_body.expertise) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! choose what expertise` });\r\n    } else if (!update_body.password) {\r\n      return response.status(400).send({ status: 400, message: `Hey !! Insert password` });\r\n    } \r\n\r\n\r\n\r\n  // users.push(update_body);\r\n  const target_user = mentors.indexOf(checkuser);\r\n  mentors.splice(target_user, 1, update_body);\r\n  return response.status(204).send({ status: 204, message: `${'Hey !! User with id' + ' '}${userid} ` + 'has updated Successfully', data: update_body });\r\n},\r\n\r\n\r\nView_all_mentor: (request,response)=>{\r\n  const sort_mentors = usersDB.filter(({category})=> category === \"mentor\");\r\n\r\n  if (sort_mentors) {\r\nconst data_to_display=[];\r\n    for (var x=0; x<sort_mentors.length; x++ ){\r\n    \r\n        data_to_display.push( {\r\n          id: sort_mentors[x].id,\r\n          category: sort_mentors[x].category,\r\n          firstName:sort_mentors[x].firstName,\r\n          lastName:sort_mentors[x].lastName,\r\n          email: sort_mentors[x].email, \r\n          address:sort_mentors[x].address,\r\n          bio: sort_mentors[x].bio, \r\n          occupation: sort_mentors[x].occupation,\r\n          expertise: sort_mentors[x].expertise,\r\n        }\r\n          );         \r\n    }\r\n    return response.status(200).send({status: 200, message:\"Hey !! Hope you are retrieving all mentors ***\", data:data_to_display});\r\n\r\n  }\r\n\r\n},\r\n\r\nView_mentor: (request,response)=>{ \r\n  const checkuser = usersDB.find((mentor) => mentor.id === parseInt(request.params.mentorId, 10));\r\n  const mentorid = parseInt(request.params.mentorId, 10);\r\n\r\n  if (!checkuser) {\r\n    return response.status(404).send({ status: 404, message: `${'Hey !! This user with id' + ' '}${mentorid} ` + 'does not exist' });\r\n  }\r\n\r\n  else{\r\n    const sort_mentors = usersDB.filter(({category, id})=> category === \"mentor\" && id === mentorid);\r\n\r\n    if (sort_mentors.length != 0) {\r\n  const data_to_display=[];\r\n      for (var x=0; x<sort_mentors.length; x++ ){\r\n      \r\n          data_to_display.push( {\r\n            id: sort_mentors[x].id,\r\n            category: sort_mentors[x].category,\r\n            firstName:sort_mentors[x].firstName,\r\n            lastName:sort_mentors[x].lastName,\r\n            email: sort_mentors[x].email, \r\n            address:sort_mentors[x].address,\r\n            bio: sort_mentors[x].bio, \r\n            occupation: sort_mentors[x].occupation,\r\n            expertise: sort_mentors[x].expertise,\r\n          }\r\n            );         \r\n      }\r\n      return response.status(200).send({status: 200, message:\"Hey !! Hope you are retrieving mentor ***\", data:data_to_display});\r\n  \r\n    }else{\r\n      return response.status(400).send({status: 400, message:\"Hey !! User not founf\"});\r\n    }\r\n\r\n    \r\n  \r\n    \r\n  }\r\n      \r\n  \r\n\r\n}\r\n\r\n\r\n  }\r\n    \r\n  module.exports =userController;\r\n  module.exports.usersDB =usersDB;"]}