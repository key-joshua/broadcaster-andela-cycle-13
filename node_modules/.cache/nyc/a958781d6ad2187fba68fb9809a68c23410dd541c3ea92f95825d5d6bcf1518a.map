{"version":3,"sources":["signup.js"],"names":["registerUsers","signupUser","req","res","body","firstname","lastname","username","email","phone","password","ckfName","imphelp","check_firstName_if_is_empty","status","json","message","cklName","check_lastName_if_is_empty","ckuName","check_userName_if_is_empty","ckEmail","check_email_if_is_empty","ckEmail1","check_email","ckEmail2","impData","check_if_email_exist","ckPhone","check_phone_if_is_empty","ckPassword","check_password_if_is_empty","ckPassword1","check_length_password","ckPassword2","check_if_password_contains_number","ckPassword3","check_if_password_contains_special_character","ckPassword4","check_if_the_use_sample","saltRound","crypt","hash","err","readyDatas","toString","trim","toLowerCase","create","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","find_id_of_this_user","visitByLink","id","created","data"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-data-structure\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport crypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/signupHelper';\n\nconst registerUsers = {\n  signupUser(req, res) {\n    const { firstname, lastname, username, email, phone, password } = req.body;\n    const ckfName = imphelp.check_firstName_if_is_empty(firstname);\n    if (ckfName) return res.status(400).json({ status: 400, message: 'Hey Insert firstname !!' });\n    const cklName = imphelp.check_lastName_if_is_empty(lastname);\n    if (cklName) return res.status(400).json({ status: 400, message: `Hey ${firstname} Insert lastname !!` });\n    const ckuName = imphelp.check_userName_if_is_empty(username);\n    if (ckuName) return res.status(400).json({ status: 400, message: `Hey ${firstname} Insert username !!` });\n    const ckEmail = imphelp.check_email_if_is_empty(email);\n    if (ckEmail) return res.status(400).json({ status: 400, message: `Hey ${username} Insert email !!` });\n    const ckEmail1 = imphelp.check_email(email);\n    if (ckEmail1) return res.status(400).json({ status: 400, message: `Hey ${username} you are using Invalid email !!` });\n    const ckEmail2 = impData.check_if_email_exist(email);\n    if (ckEmail2) return res.status(409).json({ status: 409, message: `Hey ${username} this email *${email}* already exsit !!` });\n    const ckPhone = imphelp.check_phone_if_is_empty(phone);\n    if (ckPhone) return res.status(400).json({ status: 400, message: `Hey ${username} Insert phone number !!` });\n    const ckPassword = imphelp.check_password_if_is_empty(password);\n    if (ckPassword) return res.status(400).json({ status: 400, message: `Hey ${username} Insert password !!` });\n    const ckPassword1 = imphelp.check_length_password(password);\n    if (ckPassword1) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain at least six characters !!` });\n    const ckPassword2 = imphelp.check_if_password_contains_number(password);\n    if (ckPassword2) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain number !!` });\n    const ckPassword3 = imphelp.check_if_password_contains_special_character(password);\n    if (ckPassword3) return res.status(400).json({ status: 400, message: `Hey ${username} password should contain special character like qwerty@123 !!` });\n    const ckPassword4 = imphelp.check_if_the_use_sample(password);\n    if (ckPassword4) return res.status(400).json({ status: 400, message: `Hey ${username} you are not allowed to use  qwerty@123 password it is sample` });\n\n    const saltRound = 12;\n    crypt.hash(password, saltRound, (err, hash) => {\n      const readyDatas = {\n        firstname: firstname.toString().trim().toLowerCase(),\n        lastname: lastname.toString().trim().toLowerCase(),\n        username: username.toString().trim().toLowerCase(),\n        email: email.toString().trim().toLowerCase(),\n        phone: phone,\n        password: hash,\n      };\n      impData.create(readyDatas);\n      dotenv.config();\n      const vistByToken = jwt.sign(readyDatas, process.env.SECRET_KEY, { expiresIn: '24000h' });\n      const find_id_of_this_user = impData.check_if_email_exist(email);\n      const visitByLink = `Also, You can use this link /api/v1/auth/users/${find_id_of_this_user.id} to visit your account`;\n      res.status(201).json({ status: 201, message: `Hy ${username} your account have created successfully on ${imphelp.created}`, data: { vistByToken, visitByLink } });\n    });\n  },\n};\nexport default registerUsers;\n"]}