{"version":3,"sources":["signin.js"],"names":["signinUsers","loginUser","req","res","body","email","password","ckEmail","imphelp","check_email_if_is_empty","status","json","message","ckEmail1","check_email","ckPassword","check_password_if_is_empty","impData","check_if_email_exist","find_this_user","length","crypt","compare","err","result","dotenv","config","tokens","jwt","sign","process","env","SECRET_KEY","expiresIn","username","created","Token"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,WAAW,GAAG;AACZC,EAAAA,SADY;AAAA;AAAA;AAAA,kDACFC,GADE,EACGC,GADH;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEYD,GAAG,CAACE,IAFhB,EAERC,KAFQ,aAERA,KAFQ,EAEDC,QAFC,aAEDA,QAFC;AAIVC,cAAAA,OAJU,GAIAC,yBAAQC,uBAAR,CAAgCJ,KAAhC,CAJA;;AAAA,mBAKZE,OALY;AAAA;AAAA;AAAA;;AAAA,+CAKIJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,EAAE;AAAxB,eAArB,CALJ;;AAAA;AAMVC,cAAAA,QANU,GAMCL,yBAAQM,WAAR,CAAoBT,KAApB,CAND;;AAAA,mBAOZQ,QAPY;AAAA;AAAA;AAAA;;AAAA,+CAOKV,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,EAAE;AAAxB,eAArB,CAPL;;AAAA;AAQVG,cAAAA,UARU,GAQGP,yBAAQQ,0BAAR,CAAmCV,QAAnC,CARH;;AAAA,mBASZS,UATY;AAAA;AAAA;AAAA;;AAAA,+CASOZ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,EAAE;AAAxB,eAArB,CATP;;AAAA;AAAA;AAAA,qBAWaK,eAAQC,oBAAR,CAA6Bb,KAA7B,CAXb;;AAAA;AAWVc,cAAAA,cAXU;;AAYhB,kBAAIA,cAAc,CAACC,MAAf,KAA0B,CAA9B,EAAiC;AAAEjB,gBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,kBAAAA,MAAM,EAAE,GAAV;AAAeE,kBAAAA,OAAO,EAAE;AAAxB,iBAArB;AAAmE,eAAtG,MAA4G;AAC1GS,qCAAMC,OAAN,CAAchB,QAAd,EAAwBa,cAAc,CAAC,CAAD,CAAd,CAAkBb,QAA1C,EAAoD,UAACiB,GAAD,EAAMC,MAAN,EAAiB;AACnE,sBAAIA,MAAJ,EAAY;AACVC,uCAAOC,MAAP;;AACA,wBAAMC,MAAM,GAAGC,yBAAIC,IAAJ,CAASV,cAAc,CAAC,CAAD,CAAvB,EAA4BW,OAAO,CAACC,GAAR,CAAYC,UAAxC,EAAoD;AAAEC,sBAAAA,SAAS,EAAE;AAAb,qBAApD,CAAf;;AACA9B,oBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,sBAAAA,MAAM,EAAE,GAAV;AAAeE,sBAAAA,OAAO,eAAQO,cAAc,CAAC,CAAD,CAAd,CAAkBe,QAA1B,6CAAqE1B,yBAAQ2B,OAA7E,CAAtB;AAA8GC,sBAAAA,KAAK,EAAET;AAArH,qBAArB;AACD,mBAJD,MAIO;AACLxB,oBAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,sBAAAA,MAAM,EAAE,GAAV;AAAeE,sBAAAA,OAAO,eAAQO,cAAc,CAAC,CAAD,CAAd,CAAkBe,QAA1B;AAAtB,qBAArB;AACD;AACF,iBARD;AASD;;AAtBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAApB;eAyBelC,W","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport crypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/signupHelper';\n\nconst signinUsers = {\n  async loginUser(req, res) {\n    const { email, password } = req.body;\n\n    const ckEmail = imphelp.check_email_if_is_empty(email);\n    if (ckEmail) return res.status(400).json({ status: 400, message: 'Hey Insert email !!' });\n    const ckEmail1 = imphelp.check_email(email);\n    if (ckEmail1) return res.status(400).json({ status: 400, message: 'Hey you are using Invalid email !!' });\n    const ckPassword = imphelp.check_password_if_is_empty(password);\n    if (ckPassword) return res.status(400).json({ status: 400, message: 'Hey Insert password !!' });\n\n    const find_this_user = await impData.check_if_email_exist(email);\n    if (find_this_user.length === 0) { res.status(401).json({ status: 401, message: 'Hy wrong email' }); } else {\n      crypt.compare(password, find_this_user[0].password, (err, result) => {\n        if (result) {\n          dotenv.config();\n          const tokens = jwt.sign(find_this_user[0], process.env.SECRET_KEY, { expiresIn: '24000h' });\n          res.status(200).json({ status: 200, message: `Hy ${find_this_user[0].username} your logged in successfully on ${imphelp.created}`, Token: tokens });\n        } else {\n          res.status(401).json({ status: 401, message: `Hy ${find_this_user[0].username} you are using wrong password ` });\n        }\n      });\n    }\n  },\n};\nexport default signinUsers;\n"]}