{"version":3,"sources":["updateComment.js"],"names":["dotenv","config","updateSingleRecords","updateOneRecordsComment","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","body","createdBy","title","type","latitude","longitude","comment","recordId","parseInt","params","redflagid","impData","fetchOneRecord","data","status","json","message","username","length","userid","id","files","images","imgsPath","map","path","imgs","join","videos","vidsPath","vids","readyDatas","userId","createdby","updateComment","updatedRecord","updateRecord"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport impDataFromToken from '../helpers/token';\n\ndotenv.config();\nconst updateSingleRecords = {\n  async updateOneRecordsComment(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n    const { createdBy, title, type, latitude, longitude, comment } = req.body;\n\n    const recordId = parseInt(req.params.redflagid);\n    const data = await impData.fetchOneRecord(recordId);\n\n    if (!recordId) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\n    }\n\n    if (data.length === 0) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n    if (data[0].userid !== decoded_token_in_the_way_to_obtain_user_details.id) {\n      return res.status(401).json({ status: 401, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} you are not owner of this record with id ${recordId} ` });\n    }\n\n    let imgs;\n    let vids;\n    if (req.files) {\n      if (req.files.images) {\n        const imgsPath = req.files.images.map(({ path }) => path);\n        imgs = imgsPath.join(',  ');\n      }\n      if (req.files.videos) {\n        const vidsPath = req.files.videos.map(({ path }) => path);\n        vids = vidsPath.join(',  ');\n      }\n    }\n    const readyDatas = {\n      userId: decoded_token_in_the_way_to_obtain_user_details.id,\n      createdBy: createdBy || data[0].createdby,\n      title: title || data[0].title,\n      type: type || data[0].type,\n      latitude: latitude || data[0].latitude,\n      longitude: longitude || data[0].longitude,\n      images: imgs || data[0].images,\n      videos: vids || data[0].videos,\n      comment: comment || data[0].comment,\n    };\n    const updatedRecord = await impData.updateComment(readyDatas, parseInt(req.params.redflagid));\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! Your record with id ${recordId} was updated Successfully `, updateRecord: updatedRecord });\n  },\n};\nexport default updateSingleRecords;\n"]}