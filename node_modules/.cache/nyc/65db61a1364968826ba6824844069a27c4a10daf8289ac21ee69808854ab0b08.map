{"version":3,"sources":["updateComment.js"],"names":["dotenv","config","updateSingleRecords","updateOneRecordsComment","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagid","data","impData","fetchOneRecord","status","json","message","username","userId","id","updatedRecord","updateComment","body","updateRecord"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,uBAD0B,mCACFC,GADE,EACGC,GADH,EACQ;AAChC,QAAMC,yBAAyB,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA9C;;AACA,QAAMC,+CAA+C,GAAGC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAxD;;AAEA,QAAMC,QAAQ,GAAGC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAAzB;;AACA,QAAMC,IAAI,GAAGC,eAAQC,cAAR,CAAuBN,QAAvB,CAAb;;AACA,QAAI,CAACI,IAAL,EAAW;AACT,aAAOd,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,kCAAyFV,QAAzF;AAAtB,OAArB,CAAP;AACD;;AACD,QAAII,IAAI,CAACO,MAAL,KAAgBjB,+CAA+C,CAACkB,EAApE,EAAwE;AACtE,aAAOtB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,uDAA8GV,QAA9G;AAAtB,OAArB,CAAP;AACD;;AACD,QAAMa,aAAa,GAAGR,eAAQS,aAAR,CAAsBb,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAA9B,EAAsDd,GAAG,CAAC0B,IAA1D,CAAtB;;AACA,WAAOzB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,qCAA4FV,QAA5F,+BAAtB;AAAwJgB,MAAAA,YAAY,EAAEH;AAAtK,KAArB,CAAP;AACD;AAfyB,CAA5B;eAiBe1B,mB","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport impDataFromToken from '../helpers/token';\n\ndotenv.config();\nconst updateSingleRecords = {\n  updateOneRecordsComment(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const recordId = parseInt(req.params.redflagid);\n    const data = impData.fetchOneRecord(recordId);\n    if (!data) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n    if (data.userId !== decoded_token_in_the_way_to_obtain_user_details.id) {\n      return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} you are not owner of this record with id ${recordId} ` });\n    }\n    const updatedRecord = impData.updateComment(parseInt(req.params.redflagid), req.body);\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! Your record with id ${recordId} was updated Successfully `, updateRecord: updatedRecord });\n  },\n};\nexport default updateSingleRecords;\n"]}