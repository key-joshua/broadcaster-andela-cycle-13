{"version":3,"sources":["signin.js"],"names":["signinUsers","loginUser","req","res","body","email","password","ckEmail","imphelp","check_email_if_is_empty","status","json","message","ckEmail1","check_email","ckPassword","check_password_if_is_empty","find_this_user","impData","check_if_email_exist","crypt","compare","err","result","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","visitByLink","category","username","id","created","data"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,SADkB,qBACRC,GADQ,EACHC,GADG,EACE;AAAA,oBACUD,GAAG,CAACE,IADd;AAAA,QACVC,KADU,aACVA,KADU;AAAA,QACHC,QADG,aACHA,QADG;;AAGlB,QAAMC,OAAO,GAAGC,yBAAQC,uBAAR,CAAgCJ,KAAhC,CAAhB;;AACA,QAAIE,OAAJ,EAAa,OAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AACb,QAAMC,QAAQ,GAAGL,yBAAQM,WAAR,CAAoBT,KAApB,CAAjB;;AACA,QAAIQ,QAAJ,EAAc,OAAOV,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AACd,QAAMG,UAAU,GAAGP,yBAAQQ,0BAAR,CAAmCV,QAAnC,CAAnB;;AACA,QAAIS,UAAJ,EAAgB,OAAOZ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AAGhB,QAAMK,cAAc,GAAGC,eAAQC,oBAAR,CAA6Bd,KAA7B,CAAvB;;AACA,QAAI,CAACY,cAAL,EAAqB;AAAEd,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,EAAE;AAAxB,OAArB;AAAmE,KAA1F,MAAgG;AAC9FQ,2BAAMC,OAAN,CAAcf,QAAd,EAAwBW,cAAc,CAACX,QAAvC,EAAiD,UAACgB,GAAD,EAAMC,MAAN,EAAiB;AAChE,YAAIA,MAAJ,EAAY;AACVC,6BAAOC,MAAP;;AACA,cAAMC,WAAW,GAAGC,yBAAIC,IAAJ,CAASX,cAAT,EAAyBY,OAAO,CAACC,GAAR,CAAYC,UAArC,EAAiD;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAjD,CAApB;;AACA,cAAMC,WAAW,kBAAWhB,cAAc,CAACiB,QAA1B,cAAsCjB,cAAc,CAACkB,QAArD,uDAA0GlB,cAAc,CAACmB,EAAzH,2BAAjB;AACAjC,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,YAAAA,MAAM,EAAE,GAAV;AAAeE,YAAAA,OAAO,eAAQK,cAAc,CAACkB,QAAvB,6CAAkE3B,yBAAQ6B,OAA1E,CAAtB;AAA2GC,YAAAA,IAAI,EAAE;AAAEZ,cAAAA,WAAW,EAAXA,WAAF;AAAeO,cAAAA,WAAW,EAAXA;AAAf;AAAjH,WAArB;AACD,SALD,MAKO;AACL9B,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,YAAAA,MAAM,EAAE,GAAV;AAAeE,YAAAA,OAAO,eAAQK,cAAc,CAACkB,QAAvB;AAAtB,WAArB;AACD;AACF,OATD;AAUD;AACF;AAzBiB,CAApB;eA2BenC,W","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport crypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/signupHelper';\n\nconst signinUsers = {\n  loginUser(req, res) {\n    const { email, password } = req.body;\n\n    const ckEmail = imphelp.check_email_if_is_empty(email);\n    if (ckEmail) return res.status(400).json({ status: 400, message: 'Hey Insert email !!' });\n    const ckEmail1 = imphelp.check_email(email);\n    if (ckEmail1) return res.status(400).json({ status: 400, message: 'Hey you are using Invalid email !!' });\n    const ckPassword = imphelp.check_password_if_is_empty(password);\n    if (ckPassword) return res.status(400).json({ status: 400, message: 'Hey Insert password !!' });\n\n\n    const find_this_user = impData.check_if_email_exist(email);\n    if (!find_this_user) { res.status(401).json({ status: 401, message: 'Hy wrong email' }); } else {\n      crypt.compare(password, find_this_user.password, (err, result) => {\n        if (result) {\n          dotenv.config();\n          const vistByToken = jwt.sign(find_this_user, process.env.SECRET_KEY, { expiresIn: '24000h' });\n          const visitByLink = `Hey  ${find_this_user.category} ${find_this_user.username} You can use this link /api/v1/auth/users/${find_this_user.id} to visit your account`;\n          res.status(200).json({ status: 200, message: `Hy ${find_this_user.username} your logged in successfully on ${imphelp.created}`, data: { vistByToken, visitByLink } });\n        } else {\n          res.status(401).json({ status: 401, message: `Hy ${find_this_user.username} you are using wrong password ` });\n        }\n      });\n    }\n  },\n};\nexport default signinUsers;\n"]}