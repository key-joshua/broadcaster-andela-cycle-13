{"version":3,"sources":["createRecord.js"],"names":["dotenv","config","createSingleRecords","createOneRecords","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","body","createdBy","title","type","latitude","longitude","comment","ckTitle","imphelp","check_title_if_is_empty","status","json","message","username","ckType","check_type_if_is_empty","ckComment","check_comment_if_is_empty","files","images","imgsPath","map","path","imgs","join","videos","vidsPath","vids","impData","fetchLastRecordId","recordId","readyDatas","recordid","userId","id","createRecord","data","created","record"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport imphelp from '../helpers/createHelper';\n\ndotenv.config();\nconst createSingleRecords = {\n  async createOneRecords(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n    const { createdBy, title, type, latitude, longitude, comment } = req.body;\n\n    const ckTitle = imphelp.check_title_if_is_empty(title);\n    if (ckTitle) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record title is needed !!` });\n\n    const ckType = imphelp.check_type_if_is_empty(type);\n    if (ckType) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record type is needed !!` });\n\n    const ckComment = imphelp.check_comment_if_is_empty(comment);\n    if (ckComment) return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} record comment is needed !!` });\n\n    let imgs;\n    let vids;\n    if (req.files) {\n      if (req.files.images) {\n        const imgsPath = req.files.images.map(({ path }) => path);\n        imgs = imgsPath.join(',  ');\n      }\n      if (req.files.videos) {\n        const vidsPath = req.files.videos.map(({ path }) => path);\n        vids = vidsPath.join(',  ');\n      }\n    }\n    const recordId = await impData.fetchLastRecordId();\n    const readyDatas = {\n      recordId: (recordId[0].recordid) + 1 || 1,\n      userId: decoded_token_in_the_way_to_obtain_user_details.id,\n      createdBy: createdBy || decoded_token_in_the_way_to_obtain_user_details.username,\n      title: title,\n      type: type,\n      latitude: latitude || 'none',\n      longitude: longitude || 'none',\n      images: imgs || 'nne',\n      videos: vids || 'none',\n      comment: comment,\n    };\n    const data = await impData.createRecord(readyDatas);\n    res.status(201).json({ status: 201, message: `Hy ${decoded_token_in_the_way_to_obtain_user_details.username} your record has created successfully on ${imphelp.created}`, record: data });\n  },\n};\nexport default createSingleRecords;\n"]}