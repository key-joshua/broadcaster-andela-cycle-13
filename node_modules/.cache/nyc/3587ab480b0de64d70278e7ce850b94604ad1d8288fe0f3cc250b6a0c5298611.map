{"version":3,"sources":["signin.js"],"names":["signinUsers","loginUser","req","res","body","email","password","ckEmail","imphelp","check_email_if_is_empty","status","json","ckEmail1","check_email","ckPassword","check_password_if_is_empty","find_this_user","impData","check_if_email_exist","message","crypt","compare","err","result","category","dotenv","config","vistByToken","jwt","sign","process","env","SECRET_KEY","expiresIn","visitByLink","firstname","id","created","data","visitByLinks"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\r\nimport crypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport impData from '../models/usersDB';\r\nimport imphelp from '../helpers/signupHelper';\r\n\r\nconst signinUsers = {\r\n  loginUser (req, res) {\r\n    const{email, password} = req.body;\r\n    \r\n    const ckEmail = imphelp.check_email_if_is_empty(email);\r\n    if (ckEmail) return res.status(400).json({ status: 400,'message': `Hey Insert email !!`});\r\n    const ckEmail1 = imphelp.check_email(email);\r\n    if (ckEmail1) return res.status(400).json({ status: 400,'message': `Hey you are using Invalid email !!`});\r\n    const ckPassword = imphelp.check_password_if_is_empty(password);\r\n    if (ckPassword) return res.status(400).json({ status: 400,'message': `Hey Insert password !!`});\r\n\r\n    \r\n    const find_this_user = impData.check_if_email_exist(email);\r\n    if(!find_this_user){res.status(401).json({ status: 401,  message: `Hy wrong email` }); }\r\n    else {\r\n        crypt.compare(password, find_this_user.password, (err,result)=>{   \r\n            if(result){\r\n                if(find_this_user.category === 'none'){\r\n                    dotenv.config();\r\n                    const vistByToken = jwt.sign(find_this_user, process.env.SECRET_KEY, {expiresIn : '24000h'}); \r\n                    const visitByLink = `Hey  ${find_this_user.category} ${find_this_user.firstname} You can use this link /api/v1/auth/users/${find_this_user.id} to visit your account`;\r\n                    res.status(200).json({ status: 200,  message: `Hy ${find_this_user.firstname} your logged in successfully on ${imphelp.created}` , data: { vistByToken, visitByLink } });\r\n                }\r\n                if(find_this_user.category === 'admin'){\r\n                    dotenv.config();\r\n                    const vistByToken = jwt.sign(find_this_user, process.env.SECRET_KEY, {expiresIn : '24000h'}); \r\n                    const visitByLink = `Hey  ${find_this_user.category} ${find_this_user.firstname} You can use this link /api/v1/auth/users/${find_this_user.id} to visit your account`;\r\n                    const visitByLinks = `Also, as ${find_this_user.category} You can use this link /api/v1/users/ to view all users details`;\r\n                    res.status(200).json({ status: 200,  message: `Hy ${find_this_user.firstname} your logged in successfully on ${imphelp.created}` , data: { vistByToken, visitByLink, visitByLinks } });\r\n                }; }\r\n            else {\r\n                res.status(401).json({ status: 401,  message: `Hy ${find_this_user.firstname} you are using wrong password ` }); } \r\n        })\r\n    }\r\n  }\r\n}\r\nexport default signinUsers;"]}