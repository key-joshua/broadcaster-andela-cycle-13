{"version":3,"sources":["updateLocation.js"],"names":["dotenv","config","updateSingleRecords","updateOneRecordsLocation","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagid","data","impData","fetchOneRecord","status","json","message","username","userId","id","updatedRecord","updateLocation","body","updateRecord"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,wBAD0B,oCACDC,GADC,EACIC,GADJ,EACS;AACjC,QAAMC,yBAAyB,GAAGF,GAAG,CAACG,OAAJ,CAAYC,aAA9C;;AACA,QAAMC,+CAA+C,GAAGC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAAxD;;AAEA,QAAMC,QAAQ,GAAGC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAAzB;;AACA,QAAMC,IAAI,GAAGC,eAAQC,cAAR,CAAuBN,QAAvB,CAAb;;AAEA,QAAI,CAACA,QAAL,EAAe;AACb,aAAOV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD;AAAtB,OAArB,CAAP;AACD;;AACD,QAAI,CAACN,IAAL,EAAW;AACT,aAAOd,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,kCAAyFV,QAAzF;AAAtB,OAArB,CAAP;AACD;;AACD,QAAII,IAAI,CAACO,MAAL,KAAgBjB,+CAA+C,CAACkB,EAApE,EAAwE;AACtE,aAAOtB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,uDAA8GV,QAA9G;AAAtB,OAArB,CAAP;AACD;;AACD,QAAMa,aAAa,GAAGR,eAAQS,cAAR,CAAuBb,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,SAAZ,CAA/B,EAAuDd,GAAG,CAAC0B,IAA3D,CAAtB;;AACA,WAAOzB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,qCAA4FV,QAA5F,+BAAtB;AAAwJgB,MAAAA,YAAY,EAAEH;AAAtK,KAArB,CAAP;AACD;AAnByB,CAA5B;eAqBe1B,mB","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcaster-andela-cycle-13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\r\nimport jwt from 'jsonwebtoken';\r\nimport impData from '../models/DB';\r\nimport impDataFromToken from '../helpers/token';\r\n\r\ndotenv.config();\r\nconst updateSingleRecords = {\r\n  updateOneRecordsLocation(req, res) {\r\n    const receive_token_from_header = req.headers.authorization;\r\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\r\n\r\n    const recordId = parseInt(req.params.redflagid);\r\n    const data = impData.fetchOneRecord(recordId);\r\n\r\n    if (!recordId) {\r\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\r\n    }\r\n    if (!data) {\r\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\r\n    }\r\n    if (data.userId !== decoded_token_in_the_way_to_obtain_user_details.id) {\r\n      return res.status(400).json({ status: 400, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} you are not owner of this record with id ${recordId} ` });\r\n    }\r\n    const updatedRecord = impData.updateLocation(parseInt(req.params.redflagid), req.body);\r\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! Your record with id ${recordId} was updated Successfully `, updateRecord: updatedRecord });\r\n  },\r\n};\r\nexport default updateSingleRecords;\r\n"]}