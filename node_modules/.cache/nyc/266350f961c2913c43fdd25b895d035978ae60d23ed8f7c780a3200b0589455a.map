{"version":3,"sources":["deleteRecord.js"],"names":["dotenv","config","deleteOneRecord","deleteRecord","req","res","receive_token_from_header","headers","authorization","decoded_token_in_the_way_to_obtain_user_details","jwt","verify","process","env","SECRET_KEY","recordId","parseInt","params","redflagids","impData","fetchOneRecord","data","status","json","message","username","length","userid","id"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEAA,mBAAOC,MAAP;;AACA,IAAMC,eAAe,GAAG;AAChBC,EAAAA,YADgB;AAAA;AAAA;AAAA,kDACHC,GADG,EACEC,GADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,cAAAA,yBAFc,GAEcF,GAAG,CAACG,OAAJ,CAAYC,aAF1B;AAGdC,cAAAA,+CAHc,GAGoCC,yBAAIC,MAAJ,CAAWL,yBAAX,EAAsCM,OAAO,CAACC,GAAR,CAAYC,UAAlD,CAHpC;AAKdC,cAAAA,QALc,GAKHC,QAAQ,CAACZ,GAAG,CAACa,MAAJ,CAAWC,UAAZ,CALL;AAAA;AAAA,qBAMDC,eAAQC,cAAR,CAAuBL,QAAvB,CANC;;AAAA;AAMdM,cAAAA,IANc;;AAAA,kBAOfN,QAPe;AAAA;AAAA;AAAA;;AAAA,+CAQXV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD;AAAtB,eAArB,CARW;;AAAA;AAAA,oBAUhBJ,IAAI,CAACK,MAAL,KAAgB,CAVA;AAAA;AAAA;AAAA;;AAAA,+CAWXrB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,kCAAyFV,QAAzF;AAAtB,eAArB,CAXW;;AAAA;AAAA,oBAahBM,IAAI,CAAC,CAAD,CAAJ,CAAQM,MAAR,KAAmBlB,+CAA+C,CAACmB,EAbnD;AAAA;AAAA;AAAA;;AAAA,+CAcXvB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,uDAA8GV,QAA9G;AAAtB,eAArB,CAdW;;AAAA;AAAA;AAAA,qBAgBdI,yBAAeJ,QAAf,CAhBc;;AAAA;AAAA,+CAiBbV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,gBAAAA,MAAM,EAAE,GAAV;AAAeE,gBAAAA,OAAO,gBAASf,+CAA+C,CAACgB,QAAzD,qCAA4FV,QAA5F;AAAtB,eAArB,CAjBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAxB;eAoBeb,e","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\nimport impData from '../models/DB';\nimport impDataFromToken from '../helpers/token';\n\ndotenv.config();\nconst deleteOneRecord = {\n  async deleteRecord(req, res) {\n    const receive_token_from_header = req.headers.authorization;\n    const decoded_token_in_the_way_to_obtain_user_details = jwt.verify(receive_token_from_header, process.env.SECRET_KEY);\n\n    const recordId = parseInt(req.params.redflagids);\n    const data = await impData.fetchOneRecord(recordId);\n    if (!recordId) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} insert record id ` });\n    }\n    if (data.length === 0) {\n      return res.status(404).json({ status: 404, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} this record with id ${recordId} is not found ` });\n    }\n    if (data[0].userid !== decoded_token_in_the_way_to_obtain_user_details.id) {\n      return res.status(401).json({ status: 401, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} you are not owner of this record with id ${recordId} ` });\n    }\n    await impData.delete(recordId);\n    return res.status(200).json({ status: 200, message: `Hey ${decoded_token_in_the_way_to_obtain_user_details.username} !! this record with id ${recordId} was deleted Successfully ` });\n  },\n};\nexport default deleteOneRecord;\n"]}