{"version":3,"sources":["Xsignup.js"],"names":["XController","insert","req","res","body","Name","Marks","Level","ckName","help","check_name_if_is_empty","status","send","ckStrngName","check_strong_name","ckMarks","check_mark_if_is_empty","ckLevel","check_Level_if_is_empty","cksample","check_if_the_use_sample","datas","classStuff","create","message","retrieve","students","findAll","retrieveOne","student","findOne","parseInt","params","id","update","updatedclassStuff","stud","Data"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\learn-Testing-Travis-Coveralls-Maintainability\\server\\api\\controllers","sourcesContent":["import classStuff from '../models/class';\r\nimport help from '../helpers/helper';\r\n\r\nconst XController = {\r\n  insert (req, res) {\r\n    const{Name,Marks, Level} = req.body;\r\n    const ckName = help.check_name_if_is_empty(Name);\r\n    if (ckName) return res.status(400).send({'message': 'Hey Check Name field are required'});\r\n\r\n    \r\n    const ckStrngName = help.check_strong_name(Name);\r\n    if (ckStrngName) return res.status(400).send({'message': 'Hey to use strong Name is important '});\r\n\r\n    const ckMarks = help.check_mark_if_is_empty(Marks);\r\n    if (ckMarks) return res.status(400).send({'message': 'Hey Check Marks field are required'});\r\n\r\n    const ckLevel = help.check_Level_if_is_empty(Level);\r\n    if (ckLevel) return res.status(400).send({'message': 'Hey Check Level field are required'});\r\n   \r\n    const cksample = help.check_if_the_use_sample(Name);\r\n    if (cksample) return res.status(400).send({'message': 'Hey no one allowed to use sample'});\r\n   \r\n\r\n    const datas = classStuff.create(req.body);\r\n    if (datas) {\r\n      return res.status(201).send({message : `Hy You added Successfully `, datas});\r\n    }\r\n\r\n\r\n  },\r\n  // inserts (req, res) {\r\n  //   if (!req.body.Name || !req.body.Marks || !req.body.Level) {\r\n  //     return res.status(400).send({'message': 'All fields are required'})\r\n  //   }\r\n\r\n  //   const datas = classStuff.create(req.body);\r\n  //   if (datas) {\r\n  //     return res.status(201).send({message : `Hy You added Successfully `, datas});\r\n  //   }\r\n  //   else{\r\n  //     return res.status(400).send({message : `Hy something Wrong Occured `});\r\n  //   }\r\n\r\n  // },\r\n  retrieve (req, res) {\r\n    const students = classStuff.findAll();\r\n    return res.status(200).send({'message': 'student retrieved Successfully', students});\r\n  },\r\n  retrieveOne : (req, res) => {\r\n    const student = classStuff.findOne( parseInt(req.params.id));\r\n\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    return res.status(200).send({'message': 'student retrieved Successfully', student});\r\n  },\r\n  update : (req, res) => {\r\n    const student = classStuff.findOne(parseInt(req.params.id));\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    const updatedclassStuff = classStuff.update(parseInt(req.params.id), req.body)\r\n    return res.status(200).send({'message': 'student updated Successfully',updatedclassStuff});\r\n  },\r\n  delete : (req, res) => {\r\n    const student = classStuff.findOne(parseInt(req.params.id));\r\n    if (!student) {\r\n      return res.status(404).send({'message': 'student not found'});\r\n    }\r\n    const stud = classStuff.delete(parseInt(req.params.id));\r\n    return res.status(204).send({'message': 'student deleted Successfully', Data:stud});\r\n  }\r\n}\r\nexport default XController;"]}