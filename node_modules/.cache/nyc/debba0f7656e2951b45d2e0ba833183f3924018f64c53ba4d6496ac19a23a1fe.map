{"version":3,"sources":["signin.js"],"names":["signinUsers","loginUser","req","res","body","email","password","ckEmail","imphelp","check_email_if_is_empty","status","json","message","ckEmail1","check_email","ckPassword","check_password_if_is_empty","find_this_user","impData","check_if_email_exist","crypt","compare","err","result","dotenv","config","tokens","jwt","sign","process","env","SECRET_KEY","expiresIn","username","created","Token"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,WAAW,GAAG;AAClBC,EAAAA,SADkB,qBACRC,GADQ,EACHC,GADG,EACE;AAAA,oBACUD,GAAG,CAACE,IADd;AAAA,QACVC,KADU,aACVA,KADU;AAAA,QACHC,QADG,aACHA,QADG;;AAGlB,QAAMC,OAAO,GAAGC,yBAAQC,uBAAR,CAAgCJ,KAAhC,CAAhB;;AACA,QAAIE,OAAJ,EAAa,OAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AACb,QAAMC,QAAQ,GAAGL,yBAAQM,WAAR,CAAoBT,KAApB,CAAjB;;AACA,QAAIQ,QAAJ,EAAc,OAAOV,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AACd,QAAMG,UAAU,GAAGP,yBAAQQ,0BAAR,CAAmCV,QAAnC,CAAnB;;AACA,QAAIS,UAAJ,EAAgB,OAAOZ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,MAAAA,MAAM,EAAE,GAAV;AAAeE,MAAAA,OAAO,EAAE;AAAxB,KAArB,CAAP;;AAGhB,QAAMK,cAAc,GAAGC,eAAQC,oBAAR,CAA6Bd,KAA7B,CAAvB;;AACA,QAAI,CAACY,cAAL,EAAqB;AAAEd,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,QAAAA,MAAM,EAAE,GAAV;AAAeE,QAAAA,OAAO,EAAE;AAAxB,OAArB;AAAmE,KAA1F,MAAgG;AAC9FQ,2BAAMC,OAAN,CAAcf,QAAd,EAAwBW,cAAc,CAACX,QAAvC,EAAiD,UAACgB,GAAD,EAAMC,MAAN,EAAiB;AAChE,YAAIA,MAAJ,EAAY;AACVC,6BAAOC,MAAP;;AACA,cAAMC,MAAM,GAAGC,yBAAIC,IAAJ,CAASX,cAAT,EAAyBY,OAAO,CAACC,GAAR,CAAYC,UAArC,EAAiD;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAAjD,CAAf;;AACA7B,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,YAAAA,MAAM,EAAE,GAAV;AAAeE,YAAAA,OAAO,eAAQK,cAAc,CAACgB,QAAvB,6CAAkEzB,yBAAQ0B,OAA1E,CAAtB;AAA2GC,YAAAA,KAAK,EAAGT;AAAnH,WAArB;AACD,SAJD,MAIO;AACLvB,UAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAED,YAAAA,MAAM,EAAE,GAAV;AAAeE,YAAAA,OAAO,eAAQK,cAAc,CAACgB,QAAvB;AAAtB,WAArB;AACD;AACF,OARD;AASD;AACF;AAxBiB,CAApB;eA0BejC,W","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcaster-andela-cycle-13\\server\\v1\\api\\controllers","sourcesContent":["import dotenv from 'dotenv';\r\nimport crypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport impData from '../models/DB';\r\nimport imphelp from '../helpers/signupHelper';\r\n\r\nconst signinUsers = {\r\n  loginUser(req, res) {\r\n    const { email, password } = req.body;\r\n\r\n    const ckEmail = imphelp.check_email_if_is_empty(email);\r\n    if (ckEmail) return res.status(400).json({ status: 400, message: 'Hey Insert email !!' });\r\n    const ckEmail1 = imphelp.check_email(email);\r\n    if (ckEmail1) return res.status(400).json({ status: 400, message: 'Hey you are using Invalid email !!' });\r\n    const ckPassword = imphelp.check_password_if_is_empty(password);\r\n    if (ckPassword) return res.status(400).json({ status: 400, message: 'Hey Insert password !!' });\r\n\r\n\r\n    const find_this_user = impData.check_if_email_exist(email);\r\n    if (!find_this_user) { res.status(401).json({ status: 401, message: 'Hy wrong email' }); } else {\r\n      crypt.compare(password, find_this_user.password, (err, result) => {\r\n        if (result) {\r\n          dotenv.config();\r\n          const tokens = jwt.sign(find_this_user, process.env.SECRET_KEY, { expiresIn: '24000h' });\r\n          res.status(200).json({ status: 200, message: `Hy ${find_this_user.username} your logged in successfully on ${imphelp.created}`, Token:  tokens  });\r\n        } else {\r\n          res.status(401).json({ status: 401, message: `Hy ${find_this_user.username} you are using wrong password ` });\r\n        }\r\n      });\r\n    }\r\n  },\r\n};\r\nexport default signinUsers;\r\n"]}