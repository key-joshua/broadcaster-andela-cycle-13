{"version":3,"sources":["signup.js"],"names":["registerUsers","signupUser","req","res","body","firstname","lastname","username","email","phone","password","ckfName","imphelp","check_firstName_if_is_empty","status","send","cklName","check_lastName_if_is_empty","ckuName","check_userName_if_is_empty","ckEmail","check_email_if_is_empty","ckPhone","check_phone_if_is_empty","ckPassword","check_password_if_is_empty","ckPassword1","check_length_password"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,aAAa,GAAG;AACpBC,EAAAA,UADoB,sBACRC,GADQ,EACHC,GADG,EACE;AAAA,oBAC2CD,GAAG,CAACE,IAD/C;AAAA,QACdC,SADc,aACdA,SADc;AAAA,QACHC,QADG,aACHA,QADG;AAAA,QACOC,QADP,aACOA,QADP;AAAA,QACiBC,KADjB,aACiBA,KADjB;AAAA,QACwBC,KADxB,aACwBA,KADxB;AAAA,QAC+BC,QAD/B,aAC+BA,QAD/B;;AAGpB,QAAMC,OAAO,GAAGC,yBAAQC,2BAAR,CAAoCR,SAApC,CAAhB;;AACA,QAAIM,OAAJ,EAAa,OAAOR,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AACb,QAAMC,OAAO,GAAGJ,yBAAQK,0BAAR,CAAmCX,QAAnC,CAAhB;;AACA,QAAIU,OAAJ,EAAa,OAAOb,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AACb,QAAMG,OAAO,GAAGN,yBAAQO,0BAAR,CAAmCZ,QAAnC,CAAhB;;AACA,QAAIW,OAAJ,EAAa,OAAOf,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AACb,QAAMK,OAAO,GAAGR,yBAAQS,uBAAR,CAAgCb,KAAhC,CAAhB;;AACA,QAAIY,OAAJ,EAAa,OAAOjB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AACb,QAAMO,OAAO,GAAGV,yBAAQW,uBAAR,CAAgCd,KAAhC,CAAhB;;AACA,QAAIa,OAAJ,EAAa,OAAOnB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AACb,QAAMS,UAAU,GAAGZ,yBAAQa,0BAAR,CAAmCf,QAAnC,CAAnB;;AACA,QAAIc,UAAJ,EAAgB,OAAOrB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP;;AAChB,QAAMW,WAAW,GAAGd,yBAAQe,qBAAR,CAA8BjB,QAA9B,CAApB;;AACA,QAAIgB,WAAJ,EAAiB,OAAOvB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAC,iBAAW;AAAZ,KAArB,CAAP,CAhBG,CAsBpB;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGD;AA1DmB,CAAtB;eA4Def,a","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\broadcast-andela-cycle13\\server\\api\\controllers","sourcesContent":["import impData from '../models/usersDB';\r\nimport imphelp from '../helpers/signupHelper';\r\n\r\nconst registerUsers = {\r\n  signupUser (req, res) {\r\n    const{firstname, lastname, username, email, phone, password} = req.body;\r\n\r\n    const ckfName = imphelp.check_firstName_if_is_empty(firstname);\r\n    if (ckfName) return res.status(400).send({'message': 'Hey Insert firstname !!'});\r\n    const cklName = imphelp.check_lastName_if_is_empty(lastname);\r\n    if (cklName) return res.status(400).send({'message': 'Hey Insert lastname !!'});\r\n    const ckuName = imphelp.check_userName_if_is_empty(username);\r\n    if (ckuName) return res.status(400).send({'message': 'Hey Insert username !!'});\r\n    const ckEmail = imphelp.check_email_if_is_empty(email);\r\n    if (ckEmail) return res.status(400).send({'message': 'Hey Insert email !!'});\r\n    const ckPhone = imphelp.check_phone_if_is_empty(phone);\r\n    if (ckPhone) return res.status(400).send({'message': 'Hey Insert phone number !!'});\r\n    const ckPassword = imphelp.check_password_if_is_empty(password);\r\n    if (ckPassword) return res.status(400).send({'message': 'Hey Insert password !!'});\r\n    const ckPassword1 = imphelp.check_length_password(password);\r\n    if (ckPassword1) return res.status(400).send({'message': 'Hey password should contain at least six characters !!'});\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    // const ckStrngName = help.check_length_name(Name);\r\n    // if (ckStrngName) return res.status(400).send({'message': 'Hey Name should contain above six characters'});\r\n\r\n    // const ckStrngName1 = help.check_if_name_contains_number(Name);\r\n    // if (ckStrngName1) return res.status(400).send({'message': 'Hey Name should contain numbers'});\r\n\r\n    // const ckStrngName2 = help.check_if_name_contains_character(Name);\r\n    // if (ckStrngName2) return res.status(400).send({'message': 'Hey Name should contain special character like qwerty@123'});\r\n   \r\n    // const cksample = help.check_if_the_use_sample(Name);\r\n    // if (cksample) return res.status(400).send({'message': 'Hey no one allowed to usethis sample qwerty@123'});\r\n  \r\n    // const ckMarks = help.check_mark_if_is_empty(Marks);\r\n    // if (ckMarks) return res.status(400).send({'message': 'Hey Check Marks field is required'});\r\n\r\n    // const ckLevel = help.check_Level_if_is_empty(Level);\r\n    // if (ckLevel) return res.status(400).send({'message': 'Hey Check Level field is required'});\r\n\r\n    // const ckEmail = help.check_Email_if_is_empty(Email);\r\n    // if (ckEmail) return res.status(400).send({'message': 'Hey Check Email field is required'});\r\n\r\n    // const ckEmaila = help.check_email(Email);\r\n    // if (ckEmaila) return res.status(400).send({'message': 'Hey you are using Invalid Email'});\r\n\r\n    // const datas = {\r\n    //   Name :Name.toString().trim().toLowerCase(),\r\n    //   marks :Marks.toString().trim().toLowerCase(),\r\n    //   Marks :Level.toString().trim().toLowerCase(),\r\n    //   Email :Email.toString().trim().toLowerCase()\r\n    // }\r\n\r\n    // classStuff.create(datas);\r\n    // return res.status(201).send({message : `Hy You added Successfully `, datas});\r\n    \r\n\r\n  }\r\n}\r\nexport default registerUsers;"]}