{"version":3,"sources":["class.js"],"names":["studentClass","data","newStudent","id","length","success","Name","lowPoint","Marks","takeAway","Level","createdDate","Date","modifiedDate","push","new_student","text","values","pool","query","rows","find","student","retrieve","retrieves","findOne","index","indexOf","splice"],"mappings":"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","sourceRoot":"C:\\Users\\Positivo_Computer\\Desktop\\learn-Testing-Travis-Coveralls-Maintainability\\server\\api\\models","sourcesContent":["import pool from '../config/connect_db';\r\nclass studentClass {\r\n  \r\n  constructor() {\r\n    this.class = [];\r\n  }\r\n \r\n  create(data) {\r\n    const newStudent = {\r\n      id: this.class.length + 1,\r\n      success: data.Name,\r\n      lowPoint: data.Marks ,\r\n      takeAway: data.Level,\r\n      createdDate: new Date(),\r\n      modifiedDate: new Date()\r\n    };\r\n    this.class.push(newStudent);\r\n    return newStudent\r\n  }\r\n\r\n  async insert_into_DB(new_student){\r\n    const { Name, Marks, Level} = new_student;\r\n    const text = `INSERT INTO tautorial.class( Student_Name, student_Marks, student_Level, createdDate, modifiedDate ) VALUES($1, $2, $3, $4, $5) returning *`;\r\n    const values = [Name, Marks, Level, new Date(),  new Date() ];\r\n    const { rows } = await pool.query(text, values);\r\n    return rows;\r\n  }\r\n\r\n  findOne(id) {\r\n    return this.class.find(student => student.id === id);\r\n  }\r\n\r\n  async findOne_into_DB(id){\r\n    const text = `SELECT * FROM tautorial.class WHERE id = $1`;\r\n    const values = [id];\r\n    const { rows } = await pool.query(text, values);\r\n    return rows;\r\n  }\r\n\r\n  findAll() {\r\n    return this.class;\r\n  }\r\n\r\n  async findAll_into_DB(){\r\n    const retrieve = `SELECT * FROM tautorial.class`;\r\n    const { rows } = await pool.query(retrieve);\r\n    return rows;\r\n  }\r\n   \r\n  update(id, data) {\r\n    const retrieves = this.findOne(id);\r\n    const index = this.class.indexOf(retrieves);\r\n    this.class[index].Name = data['Name'] || retrieves.Name;\r\n    this.class[index].Marks = data['Marks'] || retrieves.Marks;\r\n    this.class[index].Level = data['Level'] || retrieves.Level;\r\n    this.class[index].modifiedDate = new Date()\r\n    return this.class[index];\r\n  }\r\n\r\n  async update_into_DB(new_student, id){\r\n    const { Name, Marks, Level} = new_student;\r\n    const text = `UPDATE tautorial.class SET Student_Name=$1, student_Marks=$2, student_Level=$3, modifiedDate=$4 WHERE id = $5 returning*`;\r\n    const values = [ Name, Marks, Level, new Date(), id ];\r\n    const { rows } = await pool.query(text, values);\r\n    return rows;\r\n  }\r\n\r\n  delete(id) {\r\n    const retrieves = this.findOne(id);\r\n    const index = this.class.indexOf(retrieves);\r\n    this.class.splice(index, 1);\r\n    return {};\r\n  }\r\n  async delete_into_DB(id){\r\n    const text = `delete FROM tautorial.class WHERE id=$1 returning*`;\r\n    const values = [id];\r\n    const { rows } = await pool.query(text, values);\r\n    return rows;\r\n  }\r\n}\r\nexport default new studentClass();"]}